{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mahjo\\\\biostack\\\\apps\\\\Know-Corona\\\\frontend\\\\src\\\\TaskView.tsx\";\nimport React, { useState } from \"react\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport QuestionView from \"./QuestionView\";\nconst useStyles = makeStyles({\n  title: {\n    marginTop: 40\n  }\n});\n\nconst TaskView = ({\n  task\n}) => {\n  const classes = useStyles();\n  const [questionIndex, setQuestionIndex] = useState();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"Select a Question\"), /*#__PURE__*/React.createElement(Select, {\n    value: questionIndex,\n    onChange: e => setQuestionIndex(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, task.questions.map((question, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    value: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, question.question))), questionIndex !== undefined && /*#__PURE__*/React.createElement(QuestionView, {\n    question: task.questions[questionIndex],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default TaskView;","map":{"version":3,"sources":["C:/Users/mahjo/biostack/apps/Know-Corona/frontend/src/TaskView.tsx"],"names":["React","useState","Select","MenuItem","Typography","makeStyles","QuestionView","useStyles","title","marginTop","TaskView","task","classes","questionIndex","setQuestionIndex","e","target","value","questions","map","question","index","undefined"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AAGA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAC;AAC3BG,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE;AADN;AADoB,CAAD,CAA5B;;AAMA,MAAMC,QAAkC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACvD,QAAMC,OAAO,GAAGL,SAAS,EAAzB;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,EAAlD;AAEA,sBACE,uDACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAEW,OAAO,CAACJ,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAIE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAEK,aADT;AAEE,IAAA,QAAQ,EAAEE,CAAC,IAAID,gBAAgB,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV,CAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGN,IAAI,CAACO,SAAL,CAAeC,GAAf,CAAmB,CAACC,QAAD,EAAWC,KAAX,kBAClB,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBD,QAAQ,CAACA,QAAlC,CADD,CAJH,CAJF,EAaGP,aAAa,KAAKS,SAAlB,iBACC,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEX,IAAI,CAACO,SAAL,CAAeL,aAAf,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,CADF;AAmBD,CAvBD;;AAyBA,eAAeH,QAAf","sourcesContent":["import React, { useState } from \"react\"\r\nimport Select from \"@material-ui/core/Select\"\r\nimport MenuItem from \"@material-ui/core/MenuItem\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\r\n\r\nimport { Task } from \"./data/data\"\r\nimport QuestionView from \"./QuestionView\"\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    marginTop: 40\r\n  }\r\n})\r\n\r\nconst TaskView: React.FC<{ task: Task }> = ({ task }) => {\r\n  const classes = useStyles()\r\n  const [questionIndex, setQuestionIndex] = useState<number | undefined>()\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" className={classes.title}>\r\n        Select a Question\r\n      </Typography>\r\n      <Select\r\n        value={questionIndex}\r\n        onChange={e => setQuestionIndex(e.target.value as number)}\r\n      >\r\n        {task.questions.map((question, index) => (\r\n          <MenuItem value={index}>{question.question}</MenuItem>\r\n        ))}\r\n      </Select>\r\n\r\n      {questionIndex !== undefined && (\r\n        <QuestionView question={task.questions[questionIndex]} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskView\r\n"]},"metadata":{},"sourceType":"module"}