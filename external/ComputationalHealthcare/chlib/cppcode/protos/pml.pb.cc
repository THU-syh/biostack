// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pml.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pml.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comphealth {

namespace {

const ::google::protobuf::Descriptor* PDXCLASSIFIER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PDXCLASSIFIER_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPRESULT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPRESULT_reflection_ = NULL;
const ::google::protobuf::Descriptor* Labels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Labels_reflection_ = NULL;
const ::google::protobuf::Descriptor* Exclusions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Exclusions_reflection_ = NULL;
const ::google::protobuf::Descriptor* QUERY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QUERY_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pml_2eproto() {
  protobuf_AddDesc_pml_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pml.proto");
  GOOGLE_CHECK(file != NULL);
  PDXCLASSIFIER_descriptor_ = file->message_type(0);
  static const int PDXCLASSIFIER_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, index_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, patients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, exclusions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, count_),
  };
  PDXCLASSIFIER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PDXCLASSIFIER_descriptor_,
      PDXCLASSIFIER::default_instance_,
      PDXCLASSIFIER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDXCLASSIFIER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PDXCLASSIFIER));
  NPRESULT_descriptor_ = file->message_type(1);
  static const int NPRESULT_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPRESULT, patients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPRESULT, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPRESULT, future_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPRESULT, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPRESULT, deltah_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPRESULT, neighbors_),
  };
  NPRESULT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPRESULT_descriptor_,
      NPRESULT::default_instance_,
      NPRESULT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPRESULT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPRESULT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPRESULT));
  Labels_descriptor_ = file->message_type(2);
  static const int Labels_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, label_),
  };
  Labels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Labels_descriptor_,
      Labels::default_instance_,
      Labels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Labels));
  Exclusions_descriptor_ = file->message_type(3);
  static const int Exclusions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exclusions, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exclusions, reason_),
  };
  Exclusions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Exclusions_descriptor_,
      Exclusions::default_instance_,
      Exclusions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exclusions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exclusions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Exclusions));
  QUERY_descriptor_ = file->message_type(4);
  static const int QUERY_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUERY, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUERY, fname_),
  };
  QUERY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QUERY_descriptor_,
      QUERY::default_instance_,
      QUERY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUERY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUERY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QUERY));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pml_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PDXCLASSIFIER_descriptor_, &PDXCLASSIFIER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPRESULT_descriptor_, &NPRESULT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Labels_descriptor_, &Labels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Exclusions_descriptor_, &Exclusions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QUERY_descriptor_, &QUERY::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pml_2eproto() {
  delete PDXCLASSIFIER::default_instance_;
  delete PDXCLASSIFIER_reflection_;
  delete NPRESULT::default_instance_;
  delete NPRESULT_reflection_;
  delete Labels::default_instance_;
  delete Labels_reflection_;
  delete Exclusions::default_instance_;
  delete Exclusions_reflection_;
  delete QUERY::default_instance_;
  delete QUERY_reflection_;
}

void protobuf_AddDesc_pml_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::comphealth::protobuf_AddDesc_penums_2eproto();
  ::comphealth::protobuf_AddDesc_pvisit_2eproto();
  ::comphealth::protobuf_AddDesc_pstat_2eproto();
  ::comphealth::protobuf_AddDesc_pn1_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpml.proto\022\ncomphealth\032\014penums.proto\032\014p"
    "visit.proto\032\013pstat.proto\032\tpn1.proto\"\344\001\n\r"
    "PDXCLASSIFIER\022\022\n\nindex_code\030\001 \002(\t\022\"\n\010pat"
    "ients\030\002 \002(\0132\020.comphealth.PAGG\022\036\n\005index\030\003"
    " \002(\0132\017.comphealth.AGG\022\034\n\003sub\030\004 \001(\0132\017.com"
    "phealth.AGG\022\"\n\006labels\030\005 \003(\0132\022.comphealth"
    ".Labels\022*\n\nexclusions\030\006 \003(\0132\026.comphealth"
    ".Exclusions\022\r\n\005count\030\007 \002(\005\"\311\001\n\010NPRESULT\022"
    "\"\n\010patients\030\002 \002(\0132\020.comphealth.PAGG\022\036\n\005i"
    "ndex\030\003 \002(\0132\017.comphealth.AGG\022\037\n\006future\030\004 "
    "\001(\0132\017.comphealth.AGG\022 \n\005query\030\006 \003(\0132\021.co"
    "mphealth.QUERY\022#\n\006deltah\030\005 \002(\0132\023.comphea"
    "lth.IntHist\022\021\n\tneighbors\030\007 \002(\005\"&\n\006Labels"
    "\022\r\n\005count\030\001 \002(\005\022\r\n\005label\030\003 \001(\t\"+\n\nExclus"
    "ions\022\r\n\005count\030\001 \002(\005\022\016\n\006reason\030\003 \001(\t\"&\n\005Q"
    "UERY\022\016\n\006weight\030\001 \002(\002\022\r\n\005fname\030\003 \001(\t", 635);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pml.proto", &protobuf_RegisterTypes);
  PDXCLASSIFIER::default_instance_ = new PDXCLASSIFIER();
  NPRESULT::default_instance_ = new NPRESULT();
  Labels::default_instance_ = new Labels();
  Exclusions::default_instance_ = new Exclusions();
  QUERY::default_instance_ = new QUERY();
  PDXCLASSIFIER::default_instance_->InitAsDefaultInstance();
  NPRESULT::default_instance_->InitAsDefaultInstance();
  Labels::default_instance_->InitAsDefaultInstance();
  Exclusions::default_instance_->InitAsDefaultInstance();
  QUERY::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pml_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pml_2eproto {
  StaticDescriptorInitializer_pml_2eproto() {
    protobuf_AddDesc_pml_2eproto();
  }
} static_descriptor_initializer_pml_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PDXCLASSIFIER::kIndexCodeFieldNumber;
const int PDXCLASSIFIER::kPatientsFieldNumber;
const int PDXCLASSIFIER::kIndexFieldNumber;
const int PDXCLASSIFIER::kSubFieldNumber;
const int PDXCLASSIFIER::kLabelsFieldNumber;
const int PDXCLASSIFIER::kExclusionsFieldNumber;
const int PDXCLASSIFIER::kCountFieldNumber;
#endif  // !_MSC_VER

PDXCLASSIFIER::PDXCLASSIFIER()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.PDXCLASSIFIER)
}

void PDXCLASSIFIER::InitAsDefaultInstance() {
  patients_ = const_cast< ::comphealth::PAGG*>(&::comphealth::PAGG::default_instance());
  index_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
  sub_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
}

PDXCLASSIFIER::PDXCLASSIFIER(const PDXCLASSIFIER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.PDXCLASSIFIER)
}

void PDXCLASSIFIER::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patients_ = NULL;
  index_ = NULL;
  sub_ = NULL;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PDXCLASSIFIER::~PDXCLASSIFIER() {
  // @@protoc_insertion_point(destructor:comphealth.PDXCLASSIFIER)
  SharedDtor();
}

void PDXCLASSIFIER::SharedDtor() {
  if (index_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index_code_;
  }
  if (this != default_instance_) {
    delete patients_;
    delete index_;
    delete sub_;
  }
}

void PDXCLASSIFIER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDXCLASSIFIER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PDXCLASSIFIER_descriptor_;
}

const PDXCLASSIFIER& PDXCLASSIFIER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pml_2eproto();
  return *default_instance_;
}

PDXCLASSIFIER* PDXCLASSIFIER::default_instance_ = NULL;

PDXCLASSIFIER* PDXCLASSIFIER::New() const {
  return new PDXCLASSIFIER;
}

void PDXCLASSIFIER::Clear() {
  if (_has_bits_[0 / 32] & 79) {
    if (has_index_code()) {
      if (index_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index_code_->clear();
      }
    }
    if (has_patients()) {
      if (patients_ != NULL) patients_->::comphealth::PAGG::Clear();
    }
    if (has_index()) {
      if (index_ != NULL) index_->::comphealth::AGG::Clear();
    }
    if (has_sub()) {
      if (sub_ != NULL) sub_->::comphealth::AGG::Clear();
    }
    count_ = 0;
  }
  labels_.Clear();
  exclusions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PDXCLASSIFIER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.PDXCLASSIFIER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string index_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index_code().data(), this->index_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "index_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_patients;
        break;
      }

      // required .comphealth.PAGG patients = 2;
      case 2: {
        if (tag == 18) {
         parse_patients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_index;
        break;
      }

      // required .comphealth.AGG index = 3;
      case 3: {
        if (tag == 26) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sub;
        break;
      }

      // optional .comphealth.AGG sub = 4;
      case 4: {
        if (tag == 34) {
         parse_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_labels;
        break;
      }

      // repeated .comphealth.Labels labels = 5;
      case 5: {
        if (tag == 42) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_labels;
        if (input->ExpectTag(50)) goto parse_exclusions;
        break;
      }

      // repeated .comphealth.Exclusions exclusions = 6;
      case 6: {
        if (tag == 50) {
         parse_exclusions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exclusions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exclusions;
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // required int32 count = 7;
      case 7: {
        if (tag == 56) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.PDXCLASSIFIER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.PDXCLASSIFIER)
  return false;
#undef DO_
}

void PDXCLASSIFIER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.PDXCLASSIFIER)
  // required string index_code = 1;
  if (has_index_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_code().data(), this->index_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "index_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index_code(), output);
  }

  // required .comphealth.PAGG patients = 2;
  if (has_patients()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->patients(), output);
  }

  // required .comphealth.AGG index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->index(), output);
  }

  // optional .comphealth.AGG sub = 4;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sub(), output);
  }

  // repeated .comphealth.Labels labels = 5;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->labels(i), output);
  }

  // repeated .comphealth.Exclusions exclusions = 6;
  for (int i = 0; i < this->exclusions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->exclusions(i), output);
  }

  // required int32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.PDXCLASSIFIER)
}

::google::protobuf::uint8* PDXCLASSIFIER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.PDXCLASSIFIER)
  // required string index_code = 1;
  if (has_index_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_code().data(), this->index_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "index_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->index_code(), target);
  }

  // required .comphealth.PAGG patients = 2;
  if (has_patients()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->patients(), target);
  }

  // required .comphealth.AGG index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->index(), target);
  }

  // optional .comphealth.AGG sub = 4;
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sub(), target);
  }

  // repeated .comphealth.Labels labels = 5;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->labels(i), target);
  }

  // repeated .comphealth.Exclusions exclusions = 6;
  for (int i = 0; i < this->exclusions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->exclusions(i), target);
  }

  // required int32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.PDXCLASSIFIER)
  return target;
}

int PDXCLASSIFIER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string index_code = 1;
    if (has_index_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index_code());
    }

    // required .comphealth.PAGG patients = 2;
    if (has_patients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patients());
    }

    // required .comphealth.AGG index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index());
    }

    // optional .comphealth.AGG sub = 4;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub());
    }

    // required int32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .comphealth.Labels labels = 5;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  // repeated .comphealth.Exclusions exclusions = 6;
  total_size += 1 * this->exclusions_size();
  for (int i = 0; i < this->exclusions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exclusions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDXCLASSIFIER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PDXCLASSIFIER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PDXCLASSIFIER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PDXCLASSIFIER::MergeFrom(const PDXCLASSIFIER& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  exclusions_.MergeFrom(from.exclusions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index_code()) {
      set_index_code(from.index_code());
    }
    if (from.has_patients()) {
      mutable_patients()->::comphealth::PAGG::MergeFrom(from.patients());
    }
    if (from.has_index()) {
      mutable_index()->::comphealth::AGG::MergeFrom(from.index());
    }
    if (from.has_sub()) {
      mutable_sub()->::comphealth::AGG::MergeFrom(from.sub());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PDXCLASSIFIER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDXCLASSIFIER::CopyFrom(const PDXCLASSIFIER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDXCLASSIFIER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000047) != 0x00000047) return false;

  if (has_patients()) {
    if (!this->patients().IsInitialized()) return false;
  }
  if (has_index()) {
    if (!this->index().IsInitialized()) return false;
  }
  if (has_sub()) {
    if (!this->sub().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->labels())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->exclusions())) return false;
  return true;
}

void PDXCLASSIFIER::Swap(PDXCLASSIFIER* other) {
  if (other != this) {
    std::swap(index_code_, other->index_code_);
    std::swap(patients_, other->patients_);
    std::swap(index_, other->index_);
    std::swap(sub_, other->sub_);
    labels_.Swap(&other->labels_);
    exclusions_.Swap(&other->exclusions_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PDXCLASSIFIER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PDXCLASSIFIER_descriptor_;
  metadata.reflection = PDXCLASSIFIER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPRESULT::kPatientsFieldNumber;
const int NPRESULT::kIndexFieldNumber;
const int NPRESULT::kFutureFieldNumber;
const int NPRESULT::kQueryFieldNumber;
const int NPRESULT::kDeltahFieldNumber;
const int NPRESULT::kNeighborsFieldNumber;
#endif  // !_MSC_VER

NPRESULT::NPRESULT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.NPRESULT)
}

void NPRESULT::InitAsDefaultInstance() {
  patients_ = const_cast< ::comphealth::PAGG*>(&::comphealth::PAGG::default_instance());
  index_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
  future_ = const_cast< ::comphealth::AGG*>(&::comphealth::AGG::default_instance());
  deltah_ = const_cast< ::comphealth::IntHist*>(&::comphealth::IntHist::default_instance());
}

NPRESULT::NPRESULT(const NPRESULT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.NPRESULT)
}

void NPRESULT::SharedCtor() {
  _cached_size_ = 0;
  patients_ = NULL;
  index_ = NULL;
  future_ = NULL;
  deltah_ = NULL;
  neighbors_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPRESULT::~NPRESULT() {
  // @@protoc_insertion_point(destructor:comphealth.NPRESULT)
  SharedDtor();
}

void NPRESULT::SharedDtor() {
  if (this != default_instance_) {
    delete patients_;
    delete index_;
    delete future_;
    delete deltah_;
  }
}

void NPRESULT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPRESULT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPRESULT_descriptor_;
}

const NPRESULT& NPRESULT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pml_2eproto();
  return *default_instance_;
}

NPRESULT* NPRESULT::default_instance_ = NULL;

NPRESULT* NPRESULT::New() const {
  return new NPRESULT;
}

void NPRESULT::Clear() {
  if (_has_bits_[0 / 32] & 55) {
    if (has_patients()) {
      if (patients_ != NULL) patients_->::comphealth::PAGG::Clear();
    }
    if (has_index()) {
      if (index_ != NULL) index_->::comphealth::AGG::Clear();
    }
    if (has_future()) {
      if (future_ != NULL) future_->::comphealth::AGG::Clear();
    }
    if (has_deltah()) {
      if (deltah_ != NULL) deltah_->::comphealth::IntHist::Clear();
    }
    neighbors_ = 0;
  }
  query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPRESULT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.NPRESULT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comphealth.PAGG patients = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_index;
        break;
      }

      // required .comphealth.AGG index = 3;
      case 3: {
        if (tag == 26) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_future;
        break;
      }

      // optional .comphealth.AGG future = 4;
      case 4: {
        if (tag == 34) {
         parse_future:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_future()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_deltah;
        break;
      }

      // required .comphealth.IntHist deltah = 5;
      case 5: {
        if (tag == 42) {
         parse_deltah:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deltah()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_query;
        break;
      }

      // repeated .comphealth.QUERY query = 6;
      case 6: {
        if (tag == 50) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_query;
        if (input->ExpectTag(56)) goto parse_neighbors;
        break;
      }

      // required int32 neighbors = 7;
      case 7: {
        if (tag == 56) {
         parse_neighbors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neighbors_)));
          set_has_neighbors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.NPRESULT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.NPRESULT)
  return false;
#undef DO_
}

void NPRESULT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.NPRESULT)
  // required .comphealth.PAGG patients = 2;
  if (has_patients()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->patients(), output);
  }

  // required .comphealth.AGG index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->index(), output);
  }

  // optional .comphealth.AGG future = 4;
  if (has_future()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->future(), output);
  }

  // required .comphealth.IntHist deltah = 5;
  if (has_deltah()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->deltah(), output);
  }

  // repeated .comphealth.QUERY query = 6;
  for (int i = 0; i < this->query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->query(i), output);
  }

  // required int32 neighbors = 7;
  if (has_neighbors()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->neighbors(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.NPRESULT)
}

::google::protobuf::uint8* NPRESULT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.NPRESULT)
  // required .comphealth.PAGG patients = 2;
  if (has_patients()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->patients(), target);
  }

  // required .comphealth.AGG index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->index(), target);
  }

  // optional .comphealth.AGG future = 4;
  if (has_future()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->future(), target);
  }

  // required .comphealth.IntHist deltah = 5;
  if (has_deltah()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->deltah(), target);
  }

  // repeated .comphealth.QUERY query = 6;
  for (int i = 0; i < this->query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->query(i), target);
  }

  // required int32 neighbors = 7;
  if (has_neighbors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->neighbors(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.NPRESULT)
  return target;
}

int NPRESULT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comphealth.PAGG patients = 2;
    if (has_patients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patients());
    }

    // required .comphealth.AGG index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index());
    }

    // optional .comphealth.AGG future = 4;
    if (has_future()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->future());
    }

    // required .comphealth.IntHist deltah = 5;
    if (has_deltah()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deltah());
    }

    // required int32 neighbors = 7;
    if (has_neighbors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neighbors());
    }

  }
  // repeated .comphealth.QUERY query = 6;
  total_size += 1 * this->query_size();
  for (int i = 0; i < this->query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPRESULT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPRESULT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPRESULT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPRESULT::MergeFrom(const NPRESULT& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_.MergeFrom(from.query_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patients()) {
      mutable_patients()->::comphealth::PAGG::MergeFrom(from.patients());
    }
    if (from.has_index()) {
      mutable_index()->::comphealth::AGG::MergeFrom(from.index());
    }
    if (from.has_future()) {
      mutable_future()->::comphealth::AGG::MergeFrom(from.future());
    }
    if (from.has_deltah()) {
      mutable_deltah()->::comphealth::IntHist::MergeFrom(from.deltah());
    }
    if (from.has_neighbors()) {
      set_neighbors(from.neighbors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPRESULT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPRESULT::CopyFrom(const NPRESULT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPRESULT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;

  if (has_patients()) {
    if (!this->patients().IsInitialized()) return false;
  }
  if (has_index()) {
    if (!this->index().IsInitialized()) return false;
  }
  if (has_future()) {
    if (!this->future().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->query())) return false;
  if (has_deltah()) {
    if (!this->deltah().IsInitialized()) return false;
  }
  return true;
}

void NPRESULT::Swap(NPRESULT* other) {
  if (other != this) {
    std::swap(patients_, other->patients_);
    std::swap(index_, other->index_);
    std::swap(future_, other->future_);
    query_.Swap(&other->query_);
    std::swap(deltah_, other->deltah_);
    std::swap(neighbors_, other->neighbors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPRESULT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPRESULT_descriptor_;
  metadata.reflection = NPRESULT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Labels::kCountFieldNumber;
const int Labels::kLabelFieldNumber;
#endif  // !_MSC_VER

Labels::Labels()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.Labels)
}

void Labels::InitAsDefaultInstance() {
}

Labels::Labels(const Labels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.Labels)
}

void Labels::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  count_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Labels::~Labels() {
  // @@protoc_insertion_point(destructor:comphealth.Labels)
  SharedDtor();
}

void Labels::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Labels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Labels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Labels_descriptor_;
}

const Labels& Labels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pml_2eproto();
  return *default_instance_;
}

Labels* Labels::default_instance_ = NULL;

Labels* Labels::New() const {
  return new Labels;
}

void Labels::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    count_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Labels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.Labels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_label;
        break;
      }

      // optional string label = 3;
      case 3: {
        if (tag == 26) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.Labels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.Labels)
  return false;
#undef DO_
}

void Labels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.Labels)
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.Labels)
}

::google::protobuf::uint8* Labels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.Labels)
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.Labels)
  return target;
}

int Labels::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional string label = 3;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Labels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Labels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Labels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Labels::MergeFrom(const Labels& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Labels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Labels::CopyFrom(const Labels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Labels::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Labels::Swap(Labels* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Labels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Labels_descriptor_;
  metadata.reflection = Labels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Exclusions::kCountFieldNumber;
const int Exclusions::kReasonFieldNumber;
#endif  // !_MSC_VER

Exclusions::Exclusions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.Exclusions)
}

void Exclusions::InitAsDefaultInstance() {
}

Exclusions::Exclusions(const Exclusions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.Exclusions)
}

void Exclusions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  count_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Exclusions::~Exclusions() {
  // @@protoc_insertion_point(destructor:comphealth.Exclusions)
  SharedDtor();
}

void Exclusions::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void Exclusions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Exclusions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Exclusions_descriptor_;
}

const Exclusions& Exclusions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pml_2eproto();
  return *default_instance_;
}

Exclusions* Exclusions::default_instance_ = NULL;

Exclusions* Exclusions::New() const {
  return new Exclusions;
}

void Exclusions::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    count_ = 0;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Exclusions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.Exclusions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.Exclusions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.Exclusions)
  return false;
#undef DO_
}

void Exclusions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.Exclusions)
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.Exclusions)
}

::google::protobuf::uint8* Exclusions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.Exclusions)
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.Exclusions)
  return target;
}

int Exclusions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Exclusions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Exclusions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Exclusions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Exclusions::MergeFrom(const Exclusions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Exclusions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exclusions::CopyFrom(const Exclusions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exclusions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Exclusions::Swap(Exclusions* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Exclusions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Exclusions_descriptor_;
  metadata.reflection = Exclusions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QUERY::kWeightFieldNumber;
const int QUERY::kFnameFieldNumber;
#endif  // !_MSC_VER

QUERY::QUERY()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comphealth.QUERY)
}

void QUERY::InitAsDefaultInstance() {
}

QUERY::QUERY(const QUERY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comphealth.QUERY)
}

void QUERY::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  weight_ = 0;
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QUERY::~QUERY() {
  // @@protoc_insertion_point(destructor:comphealth.QUERY)
  SharedDtor();
}

void QUERY::SharedDtor() {
  if (fname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fname_;
  }
  if (this != default_instance_) {
  }
}

void QUERY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QUERY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUERY_descriptor_;
}

const QUERY& QUERY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pml_2eproto();
  return *default_instance_;
}

QUERY* QUERY::default_instance_ = NULL;

QUERY* QUERY::New() const {
  return new QUERY;
}

void QUERY::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    weight_ = 0;
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QUERY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comphealth.QUERY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float weight = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fname;
        break;
      }

      // optional string fname = 3;
      case 3: {
        if (tag == 26) {
         parse_fname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comphealth.QUERY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comphealth.QUERY)
  return false;
#undef DO_
}

void QUERY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comphealth.QUERY)
  // required float weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  // optional string fname = 3;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comphealth.QUERY)
}

::google::protobuf::uint8* QUERY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comphealth.QUERY)
  // required float weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  // optional string fname = 3;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comphealth.QUERY)
  return target;
}

int QUERY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float weight = 1;
    if (has_weight()) {
      total_size += 1 + 4;
    }

    // optional string fname = 3;
    if (has_fname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QUERY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QUERY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QUERY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QUERY::MergeFrom(const QUERY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_fname()) {
      set_fname(from.fname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QUERY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QUERY::CopyFrom(const QUERY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUERY::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QUERY::Swap(QUERY* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(fname_, other->fname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QUERY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QUERY_descriptor_;
  metadata.reflection = QUERY_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comphealth

// @@protoc_insertion_point(global_scope)
